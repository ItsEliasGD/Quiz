// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Quiz.Data;

public partial class QuizEntities : DbContext
{
    public QuizEntities()
    {
    }

    public QuizEntities(DbContextOptions<QuizEntities> options)
        : base(options)
    {
    }

    public virtual DbSet<Answers> Answers { get; set; }

    public virtual DbSet<Questions> Questions { get; set; }

    public virtual DbSet<Quizes> Quizes { get; set; }

    public virtual DbSet<RoomQuizes> RoomQuizes { get; set; }

    public virtual DbSet<Rooms> Rooms { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=WIN-BNES3C0B631;Initial Catalog=Quiz;Persist Security Info=True;User ID=Quiz;Password=1234");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Answers>(entity =>
        {
            entity.HasKey(e => e.Id_Answer);

            entity.Property(e => e.Description)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.fk_QuestionNavigation).WithMany(p => p.Answers)
                .HasForeignKey(d => d.fk_Question)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Answers_Questions");
        });

        modelBuilder.Entity<Questions>(entity =>
        {
            entity.HasKey(e => e.Id_Question);

            entity.Property(e => e.Description)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.fk_QuizNavigation).WithMany(p => p.Questions)
                .HasForeignKey(d => d.fk_Quiz)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Questions_Quizes");
        });

        modelBuilder.Entity<Quizes>(entity =>
        {
            entity.HasKey(e => e.Id_Quiz);

            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.Description)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.fk_UserNavigation).WithMany(p => p.Quizes)
                .HasForeignKey(d => d.fk_User)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Quizes_Users");
        });

        modelBuilder.Entity<RoomQuizes>(entity =>
        {
            entity.HasKey(e => e.Id_RoomQuize);

            entity.HasOne(d => d.fk_QuizNavigation).WithMany(p => p.RoomQuizes)
                .HasForeignKey(d => d.fk_Quiz)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RoomQuizes_Quizes");

            entity.HasOne(d => d.fk_RoomNavigation).WithMany(p => p.RoomQuizes)
                .HasForeignKey(d => d.fk_Room)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RoomQuizes_Rooms");
        });

        modelBuilder.Entity<Rooms>(entity =>
        {
            entity.HasKey(e => e.Id_Room);

            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.Description)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.fk_UserNavigation).WithMany(p => p.Rooms)
                .HasForeignKey(d => d.fk_User)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rooms_Users");
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.Id_User);

            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.Email)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}